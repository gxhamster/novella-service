"use client";
import { useContext, useState } from "react";
import { createColumnHelper } from "@tanstack/react-table";
import Link from "next/link";
import { IStudent } from "@/supabase/types/supabase";
import {
  NDrawerCreateForm,
  NDrawerCreateFormFieldsType,
} from "@/components/NDrawer";
import NDataTableFixed from "@/components/NDataTableFixed";
import { NAlertContext, NAlertContextType } from "@/components/NAlert";
import NDeleteModal from "@/components/NDeleteModal";
import { NDataTableFixedFetchFunctionProps } from "@/components/NDataTableFixed";
import { trpc } from "@/app/_trpc/client";

export default function StudentsTable() {
  const columnHelper = createColumnHelper<IStudent>();
  const [isAddBookDrawerOpen, setIsAddBookDrawerOpen] = useState(false);
  const [isDeleteStudentModalOpen, setIsDeleteStudentModalOpen] =
    useState(false);
  const [deletedStudentsRows, setDeletedStudentRows] = useState<IStudent[]>([]);
  const [saveButtonLoading, setSaveButtonLoading] = useState(false);
  const [fetchFunctionOpts, setFetchFunctionOpts] = useState<
    NDataTableFixedFetchFunctionProps<IStudent>
  >({
    pageIndex: 0,
    pageSize: 10,
    filters: [],
    sorts: null,
  });
  const { openAlert, setContent, isOpen } = useContext(
    NAlertContext
  ) as NAlertContextType;

  const getStudentsByPageQuery =
    trpc.students.getStudentsByPage.useQuery(fetchFunctionOpts);

  const addStudentMutation = trpc.students.createStudent.useMutation({
    onError: (_error) => {
      setSaveButtonLoading(false);
      throw new Error(_error.message);
    },
    onSettled: () => {
      setSaveButtonLoading(false);
      getStudentsByPageQuery.refetch();
    },
  });

  const deleteStudentMutation = trpc.students.deleteStudentsById.useMutation({
    onError: (_error) => {
      throw new Error(_error.message, {
        cause: _error.shape?.data,
      });
    },
    onSettled: () => {
      setIsDeleteStudentModalOpen(false);
      getStudentsByPageQuery.refetch();
    },
  });

  const addStudentToSupabase = async (formData: IStudent) => {
    setSaveButtonLoading(true);
    addStudentMutation.mutate(formData);
  };

  const columnsObj: Array<{
    id: keyof IStudent;
    header: string;
    isLink?: boolean;
  }> = [
    { id: "id", header: "ID", isLink: true },
    { id: "name", header: "Name" },
    { id: "island", header: "Island" },
    { id: "address", header: "Address" },
    { id: "phone", header: "Phone" },
    { id: "grade", header: "Grade" },
    { id: "index", header: "Index" },
  ];

  const tanstackColumns = columnsObj.map((column) =>
    columnHelper.accessor(column.id, {
      cell: (info) =>
        column.isLink ? (
          <Link
            href={`/dashboard/students/${info.getValue()}`}
            className="hover:underline hover:text-primary-700"
          >
            {info.getValue()}
          </Link>
        ) : (
          info.getValue()
        ),
      header: column.header,
    })
  );

  const studentCategories: NDrawerCreateFormFieldsType<IStudent>[] = [
    {
      title: "",
      fields: [
        {
          field: "id",
          title: "ID",
          help: "ID is generated by the system",
          disabled: true,
          fieldType: "number",
        },
        {
          field: "created_at",
          title: "Created At",
          help: "If not assigned the current date will be used",
          fieldType: "string",
        },
        {
          field: "name",
          title: "Name",
          fieldType: "string",
        },
      ],
    },
    {
      title: "Student Details",
      description: "These are fields that are not required",
      fields: [
        {
          field: "island",
          title: "Island",
          fieldType: "string",
        },
        {
          field: "address",
          title: "Address",
          fieldType: "string",
        },
        {
          field: "phone",
          title: "Phone",
          fieldType: "number",
        },
        {
          field: "grade",
          title: "Grade",
          fieldType: "string",
        },
        {
          field: "index",
          title: "Index",
          fieldType: "number",
        },
      ],
    },
  ];

  return (
    <>
      <NDrawerCreateForm<IStudent>
        title="Add new student to library"
        saveButtonLoadingState={saveButtonLoading}
        isOpen={isAddBookDrawerOpen}
        onFormSubmit={addStudentToSupabase}
        closeDrawer={() => setIsAddBookDrawerOpen(false)}
        formFieldsCategories={studentCategories}
        defaultValues={{
          created_at: new Date().toISOString(),
          index: 0,
          phone: 0,
        }}
      />

      <NDataTableFixed<IStudent>
        columns={columnsObj}
        tanStackColumns={tanstackColumns}
        onCreateRowButtonPressed={() => setIsAddBookDrawerOpen(true)}
        isDataLoading={
          getStudentsByPageQuery.isLoading ||
          getStudentsByPageQuery.isRefetching
        }
        onRowDeleted={(deletedRows) => {
          setDeletedStudentRows([...deletedRows]);
          setIsDeleteStudentModalOpen(true);
        }}
        data={
          getStudentsByPageQuery.data ? getStudentsByPageQuery.data.data : []
        }
        dataCount={
          getStudentsByPageQuery.data ? getStudentsByPageQuery.data.count : 0
        }
        onRefresh={() => {
          getStudentsByPageQuery.refetch();
        }}
        onPaginationChanged={(opts) => {
          setFetchFunctionOpts(opts);
        }}
      />
      <NDeleteModal
        isOpen={isDeleteStudentModalOpen}
        closeModal={() => setIsDeleteStudentModalOpen(false)}
        onDelete={async () => {
          const ids = deletedStudentsRows?.map((rows) => rows.id);
          deleteStudentMutation.mutate(ids);
        }}
      />
    </>
  );
}
