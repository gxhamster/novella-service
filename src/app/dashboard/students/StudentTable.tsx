"use client";
import { useContext, useState } from "react";
import { createColumnHelper } from "@tanstack/react-table";
import Link from "next/link";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Database, IStudent } from "@/supabase/types/supabase";
import {
  NDrawerCreateForm,
  NDrawerCreateFormFieldsType,
} from "@/components/NDrawer";
import NDataTableFixed, {
  NDataTableFixedFetchFunction,
  NDataTableFixedConvertToSupabaseFilters,
} from "@/components/NDataTableFixed";
import NModal from "@/components/NModal";
import NButton from "@/components/NButton";
import { NAlertContext, NAlertContextType } from "@/components/NAlert";

export default function StudentsTable() {
  const columnHelper = createColumnHelper<IStudent>();
  const [isAddBookDrawerOpen, setIsAddBookDrawerOpen] = useState(false);
  const [isDeleteStudentModalOpen, setIsDeleteStudentModalOpen] =
    useState(false);
  const [deletedStudentsRows, setDeletedStudentRows] = useState<IStudent[]>();
  const [saveButtonLoading, setSaveButtonLoading] = useState(false);
  const { openAlert, setContent, isOpen } = useContext(
    NAlertContext
  ) as NAlertContextType;

  const getBooksByPage: NDataTableFixedFetchFunction<IStudent> = async ({
    pageIndex,
    pageSize,
    filters,
    sorts,
  }) => {
    const supabaseFilters = NDataTableFixedConvertToSupabaseFilters(filters);
    const supabase = createClientComponentClient<Database>();

    let query = supabase.from("students").select("*", { count: "estimated" });
    if (filters.length > 0) query = query.or(supabaseFilters);
    if (sorts) query = query.order(sorts.field, { ascending: sorts.ascending });
    query = query.range(pageIndex * pageSize, pageSize * (pageIndex + 1));
    const { data, count, error } = await query;

    if (error) throw new Error(error.message);

    return { data, count: count ? count : 0 };
  };

  const columnsObj: Array<{
    id: keyof IStudent;
    header: string;
    isLink?: boolean;
  }> = [
    { id: "id", header: "ID", isLink: true },
    { id: "name", header: "Name" },
    { id: "island", header: "Island" },
    { id: "address", header: "Address" },
    { id: "phone", header: "Phone" },
    { id: "grade", header: "Grade" },
    { id: "index", header: "Index" },
  ];

  const tanstackColumns = columnsObj.map((column) =>
    columnHelper.accessor(column.id, {
      cell: (info) =>
        column.isLink ? (
          <Link
            href={`/dashboard/students/${info.getValue()}`}
            className="hover:underline hover:text-primary-700"
          >
            {info.getValue()}
          </Link>
        ) : (
          info.getValue()
        ),
      header: column.header,
    })
  );

  const addStudentToSupabase = async (formData: IStudent) => {
    setSaveButtonLoading(true);
    const { _, error } = await fetch("/api/students", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(formData),
    }).then((res) => res.json());

    if (error) {
      setSaveButtonLoading(false);
      throw new Error(error.message);
    }
    setSaveButtonLoading(false);
  };

  type IStudentV2 = {
    [Property in keyof IStudent]: Property extends "id"
      ? JSX.Element
      : IStudent[Property];
  };

  const studentCategories: NDrawerCreateFormFieldsType<IStudent>[] = [
    {
      title: "",
      fields: [
        {
          field: "id",
          title: "ID",
          help: "ID is generated by the system",
          disabled: true,
          fieldType: "number",
        },
        {
          field: "created_at",
          title: "Created At",
          help: "If not assigned the current date will be used",
          fieldType: "string",
        },
        {
          field: "name",
          title: "Name",
          fieldType: "string",
        },
      ],
    },
    {
      title: "Student Details",
      description: "These are fields that are not required",
      fields: [
        {
          field: "island",
          title: "Island",
          fieldType: "string",
        },
        {
          field: "address",
          title: "Address",
          fieldType: "string",
        },
        {
          field: "phone",
          title: "Phone",
          fieldType: "number",
        },
        {
          field: "grade",
          title: "Grade",
          fieldType: "string",
        },
        {
          field: "index",
          title: "Index",
          fieldType: "number",
        },
      ],
    },
  ];

  return (
    <>
      <NDrawerCreateForm<IStudent>
        title="Add new student to library"
        saveButtonLoadingState={saveButtonLoading}
        isOpen={isAddBookDrawerOpen}
        onFormSubmit={addStudentToSupabase}
        closeDrawer={() => setIsAddBookDrawerOpen(false)}
        formFieldsCategories={studentCategories}
        defaultValues={{
          created_at: new Date().toISOString(),
          index: 0,
          phone: 0,
        }}
      />

      <NDataTableFixed<IStudent>
        columns={columnsObj}
        tanStackColumns={tanstackColumns}
        onCreateRowButtonPressed={() => setIsAddBookDrawerOpen(true)}
        onRowDeleted={(deletedRows) => {
          setDeletedStudentRows([...deletedRows]);
          setIsDeleteStudentModalOpen(true);
        }}
        fetchData={getBooksByPage}
      />
      <NModal
        isOpen={isDeleteStudentModalOpen}
        title="Confirm to delete"
        onModalClose={() => setIsDeleteStudentModalOpen(false)}
      >
        <section className="p-4">
          <p className="text-sm text-surface-700">
            Are you sure you want to delete the selected rows?
          </p>
          <p className="text-sm text-surface-700">
            This action cannot be undone
          </p>
        </section>
        <section className="flex gap-2 justify-end py-3 border-t-[1px] border-surface-300 px-3">
          <NButton
            kind="secondary"
            title="Cancel"
            onClick={() => setIsDeleteStudentModalOpen(false)}
          />
          <NButton
            kind="alert"
            title="Delete"
            onClick={async () => {
              const ids = deletedStudentsRows?.map((rows) => rows.id);
              const { error } = await fetch("/api/students", {
                method: "DELETE",
                body: JSON.stringify({ ids }),
              }).then((response) => response.json());
              if (error) {
                setContent({
                  title: "Could not delete the student",
                  description: error.message,
                });
                openAlert();
                // throw new Error(error.message);
              }
              setIsDeleteStudentModalOpen(false);
            }}
          />
        </section>
      </NModal>
    </>
  );
}
