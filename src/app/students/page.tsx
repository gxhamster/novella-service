"use client";
import { useState } from "react";
import { createColumnHelper } from "@tanstack/react-table";
import { IStudent } from "@/supabase/types/supabase";
import { trpc } from "@/app/_trpc/client";
import { getStudentsByPageType } from "@/server/routes/student";
import { format } from "date-fns";
import { ZStudentInsert } from "@/supabase/schema";
import { Toast } from "@/components/Toast";
import {
  FixedTable,
  FixedTableContent,
  FixedTableControls,
  FixedTableEmptyContent,
  FixedTableFetchFunctionProps,
  FixedTableToolbar,
} from "@/components/FixedTable";
import { useDisclosure } from "@mantine/hooks";
import {
  DrawerCreateForm,
  DrawerCreateFormFieldsType,
} from "@/components/Drawer";
import { useRouter } from "next/navigation";
import { Button } from "@mantine/core";
import DeleteModal from "@/components/NDeleteModal";
import Link from "next/link";
import UploadIcon from "@/components/icons/UploadIcon";
import ImportPreview from "./ImportPreview";

type SearchParamsProps = {
  searchParams: Record<string, string> | null | undefined;
};

export default function Students({ searchParams }: SearchParamsProps) {
  const showImportPreview = searchParams?.show;
  const columnHelper = createColumnHelper<getStudentsByPageType>();
  const [addBookDrawerOpen, addBookDrawerHandler] = useDisclosure(false);
  const [deleteStudentModalOpen, deleteStudentModalHandler] =
    useDisclosure(false);
  const [deletedStudentsRows, setDeletedStudentRows] = useState<
    getStudentsByPageType[]
  >([]);
  const [saveButtonLoading, setSaveButtonLoading] = useState(false);
  const [fetchFunctionOpts, setFetchFunctionOpts] = useState<
    FixedTableFetchFunctionProps<getStudentsByPageType>
  >({
    pageIndex: 0,
    pageSize: 10,
    filters: [],
    sorts: null,
  });
  const router = useRouter();

  const getStudentsByPageQuery =
    trpc.students.getStudentsByPage.useQuery(fetchFunctionOpts);

  const addStudentMutation = trpc.students.createStudent.useMutation({
    onError: (_error) => {
      Toast.Error({
        title: "Could not create student",
        message: _error.message,
      });
      setSaveButtonLoading(false);
      throw new Error(_error.message);
    },
    onSuccess: () => {
      Toast.Successful({
        title: "Successful",
        message: "New student created",
      });
      setSaveButtonLoading(false);
      getStudentsByPageQuery.refetch();
    },
  });

  const deleteStudentMutation = trpc.students.deleteStudentsById.useMutation({
    onError: (_error) => {
      throw new Error(_error.message, {
        cause: _error.shape?.data,
      });
    },
    onSettled: () => {
      deleteStudentModalHandler.close();
      getStudentsByPageQuery.refetch();
    },
  });

  const addStudentToSupabase = async (formData: getStudentsByPageType) => {
    setSaveButtonLoading(true);
    addStudentMutation.mutate(formData);
  };

  type StudentTableColsDef = {
    id: keyof getStudentsByPageType;
    header: string;
    type?: "date" | "link";
  };

  const columnsObj: Array<StudentTableColsDef> = [
    { id: "id", header: "ID", type: "link" },
    { id: "created_at", header: "Created At", type: "date" },
    { id: "name", header: "Name" },
    { id: "island", header: "Island" },
    { id: "address", header: "Address" },
    { id: "phone", header: "Phone" },
    { id: "grade", header: "Grade" },
    { id: "index", header: "Index" },
  ];

  const tanstackColumns = columnsObj.map((column) =>
    columnHelper.accessor(column.id, {
      cell: (info) => {
        switch (column.type) {
          case "date":
            return format(new Date(info.getValue() || 0), "dd-MM-yyyy hh:mm");
          case "link":
            return (
              <Link
                href={`/students/${info.getValue()}`}
                className="hover:underline hover:text-primary-700"
              >
                {info.getValue()}
              </Link>
            );
          default:
            return info.getValue();
        }
      },

      header: column.header,
    }),
  );

  const studentCategories: DrawerCreateFormFieldsType<IStudent>[] = [
    {
      title: "",
      fields: [
        {
          field: "id",
          title: "ID",
          help: "ID is generated by the system",
          disabled: true,
          fieldType: "number",
        },
        {
          field: "created_at",
          title: "Created At",
          help: "If not assigned the current date will be used",
          fieldType: "date",
        },
        {
          field: "name",
          title: "Name",
          fieldType: "string",
        },
      ],
    },
    {
      title: "Student Details",
      description: "These are fields that are not required",
      fields: [
        {
          field: "island",
          title: "Island",
          fieldType: "string",
        },
        {
          field: "address",
          title: "Address",
          fieldType: "string",
        },
        {
          field: "phone",
          title: "Phone",
          fieldType: "string",
        },
        {
          field: "grade",
          title: "Grade",
          fieldType: "number",
        },
        {
          field: "index",
          title: "Index",
          fieldType: "number",
        },
      ],
    },
  ];
  return (
    <div className="w-full h-full flex flex-col text-surface-900 gap-y-3 m-0">
      <DrawerCreateForm<IStudent>
        title="Add new student to library"
        schema={ZStudentInsert}
        saveButtonLoadingState={saveButtonLoading}
        isOpen={addBookDrawerOpen}
        onFormSubmit={addStudentToSupabase}
        closeDrawer={addBookDrawerHandler.close}
        formFieldsCategories={studentCategories}
        defaultValues={{
          created_at: format(new Date(), "yyyy-MM-dd'T'hh:mm"),
          grade: 1,
          phone: "",
        }}
      />

      <FixedTable<getStudentsByPageType>
        tanStackColumns={tanstackColumns}
        data={getStudentsByPageQuery.data?.data || []}
        onPaginationChanged={(opts) => setFetchFunctionOpts(opts)}
        dataCount={getStudentsByPageQuery.data?.count || 0}
      >
        <FixedTableToolbar<getStudentsByPageType>
          primaryActionTitle="Add student"
          columns={columnsObj}
          onRefresh={getStudentsByPageQuery.refetch}
          primaryAction={addBookDrawerHandler.open}
          onRowDeleted={(deletedRows) => {
            setDeletedStudentRows([...deletedRows]);
            deleteStudentModalHandler.open();
          }}
          isDataLoading={
            getStudentsByPageQuery.isLoading ||
            getStudentsByPageQuery.isRefetching
          }
        >
          <Button
            color="gray"
            variant="default"
            size="xs"
            onClick={() => router.push("/students?show=true")}
            leftSection={<UploadIcon size={16} />}
          >
            Import
          </Button>
        </FixedTableToolbar>
        <FixedTableContent />
        <FixedTableEmptyContent />
        <FixedTableControls loading={getStudentsByPageQuery.isLoading} />
      </FixedTable>
      {showImportPreview && <ImportPreview />}
      <DeleteModal
        isOpen={deleteStudentModalOpen}
        closeModal={deleteStudentModalHandler.close}
        onDelete={async () => {
          const ids = deletedStudentsRows?.map((rows) => rows.id);
          deleteStudentMutation.mutate(ids);
        }}
      />
    </div>
  );
}
