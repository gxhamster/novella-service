import { IStudent } from "@/types/supabase";
import { useForm } from "react-hook-form";
import NDrawer from "@/components/NDrawer";
import NovellaInput from "@/components/NovellaInput";
import ButtonGhost from "@/components/ButtonGhost";
import ButtonPrimary from "@/components/ButtonPrimary";
import LoadingIcon from "@/components/icons/LoadingIcon";

type NDrawerCreateStudentProps = {
  isOpen: boolean;
  closeDrawer: () => void;
  title: string;
  onStudentFormSubmit: (formData: IStudent) => void;
  saveButtonLoadingState: boolean;
};

export default function NDrawerCreateStudent({
  isOpen,
  closeDrawer,
  title,
  onStudentFormSubmit,
  saveButtonLoadingState,
}: NDrawerCreateStudentProps) {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<IStudent>({
    defaultValues: {
      created_at: new Date().toISOString(),
      index: 0,
      phone: 0,
    },
  });

  type StudentFields = {
    title: string;
    description?: string;
    fields: Array<{
      field: keyof IStudent;
      title: string;
      help?: string;
      fieldType: "number" | "string";
      disabled?: boolean;
    }>;
  };

  const studentCategories: StudentFields[] = [
    {
      title: "",
      fields: [
        {
          field: "id",
          title: "ID",
          help: "ID is generated by the system",
          disabled: true,
          fieldType: "number",
        },
        {
          field: "created_at",
          title: "Created At",
          help: "If not assigned the current date will be used",
          fieldType: "string",
        },
        {
          field: "name",
          title: "Name",
          fieldType: "string",
        },
      ],
    },
    {
      title: "Student Details",
      description: "These are fields that are not required",
      fields: [
        {
          field: "island",
          title: "Island",
          fieldType: "string",
        },
        {
          field: "address",
          title: "Address",
          fieldType: "string",
        },
        {
          field: "phone",
          title: "Phone",
          fieldType: "number",
        },
        {
          field: "grade",
          title: "Grade",
          fieldType: "string",
        },
        {
          field: "index",
          title: "Index",
          fieldType: "number",
        },
      ],
    },
  ];

  return (
    <NDrawer isOpen={isOpen} closeDrawer={closeDrawer} title={title}>
      <div className="flex flex-col justify-between h-[calc(100vh-57px)] overflow-y-auto">
        <form
          onSubmit={handleSubmit(onStudentFormSubmit)}
          className="flex flex-col"
        >
          {studentCategories.map((category) => (
            <div className="flex flex-col gap-7 border-b-[1px] border-surface-300 p-6">
              {category.title || category.description ? (
                <section className="flex flex-col gap-2">
                  <h3 className="text-md text-surface-800">{category.title}</h3>
                  <span className="text-sm text-surface-500">
                    {category.description}
                  </span>
                </section>
              ) : null}
              {category.fields.map((field) => (
                <NovellaInput
                  type="text"
                  fontSize="xs"
                  helpText={field.help}
                  reactHookErrorMessage={errors[field.field]}
                  reactHookRegister={register(field.field, {
                    valueAsNumber: field.fieldType === "number" ? true : false,
                    disabled: saveButtonLoadingState ? true : field.disabled,
                  })}
                  labelDirection="horizontal"
                  title={field.title}
                />
              ))}
            </div>
          ))}
          <div className="flex justify-end p-3 gap-2">
            <ButtonGhost
              title="Cancel"
              onClick={(e) => {
                e.preventDefault();
                reset();
                closeDrawer();
              }}
            />
            <ButtonPrimary
              disabled={saveButtonLoadingState}
              icon={
                saveButtonLoadingState ? (
                  <LoadingIcon className="text-surface-900" size={18} />
                ) : null
              }
              title="Save"
            />
          </div>
        </form>
      </div>
    </NDrawer>
  );
}
